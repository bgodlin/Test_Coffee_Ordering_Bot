from telegram import LabeledPrice, InlineKeyboardButton, InlineKeyboardMarkup, ReplyKeyboardRemove
from telegram.ext import Updater, CommandHandler, MessageHandler, Filters, PreCheckoutQueryHandler, CallbackQueryHandler
import json
from tabulate import tabulate


# TODO: translate comments
class CoffeeBot:
    def __init__(self):
        self.cart = []
        self.prices = self.parse_items()

    def start_callback(self, bot, update):
        bot.send_message(chat_id=update.message.chat_id,
                         text="–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Test Coffee Bot, –≥–¥–µ –≤—ã"
                              " –º–æ–∂–µ—Ç–µ –∑–∞–∫–∞–∑—ã–≤–∞—Ç—å –∫–æ—Ñ–µ –ø—Ä—è–º–æ –∏–∑ –¢–µ–ª–µ–≥—Ä–∞–º. –ù–∞–∂–º–∏—Ç–µ /choose!")

    def order(self, bot, update):
        chat_id = update.message.chat_id
        title = '–í–∞—à –∑–∞–∫–∞–∑...'
        description = "–ù–∞–∂–º–∏—Ç–µ –Ω–∞ –∫–Ω–æ–ø–∫—É, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–∫–∞–∑–µ"
        payload = "–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å –ø–æ–º–æ—â—å—é —Ç–µ–ª–µ–≥—Ä–∞–º –±–æ—Ç–∞"
        provider_token = "401643678:TEST:5e9fcf5b-6fd3-471f-9f44-9973107b5dce"
        start_parameter = "test-payment"
        currency = "RUB"
        bot.sendInvoice(chat_id, title, description, payload,
                        provider_token, start_parameter, currency, self.prices,
                        need_name=True, need_phone_number=True,
                        need_email=False)

    # TODO: get items from "prices"
    def choose(self, bot, update):
        menu_main = [[InlineKeyboardButton('–ö–∞–ø—É—á–∏–Ω–æ - 100—Ä.', callback_data='m1')],
                     [InlineKeyboardButton('–õ–∞—Ç—Ç–µ - 100—Ä.', callback_data='m2')],
                     [InlineKeyboardButton('–≠—Å–ø—Ä–µ—Å—Å–æ - 70—Ä.', callback_data='m3')],
                     [InlineKeyboardButton('–†–∞—Ñ - 130—Ä.', callback_data='m4')],
                     [InlineKeyboardButton('–ú–æ–∫–∞—á–∏–Ω–æ - 120—Ä.', callback_data='m5')],
                     [InlineKeyboardButton('üèÅ –ó–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–∫–∞–∑ üèÅ', callback_data='m6')]]
        reply_markup = InlineKeyboardMarkup(menu_main)
        update.message.reply_text('–ù–∞–∂–º–∏—Ç–µ –Ω–∞ —ç–ª–µ–º–µ–Ω—Ç, —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –µ–≥–æ –≤ –∫–æ—Ä–∑–∏–Ω—É:', reply_markup=reply_markup)

    def select_menu_actions(self, bot, update):

        query = update.callback_query
        selected_item = {}

        if query.data == 'm1':

            selected_item["name"] = "–ö–∞–ø—É—á–∏–Ω–æ"
            selected_item["price"] = "10000"
            print('–í—ã–±—Ä–∞–ª–∏ –ö–∞–ø—É—á–∏–Ω–æ')

        elif query.data == 'm2':

            selected_item["name"] = "–õ–∞—Ç—Ç–µ"
            selected_item["price"] = "10000"
            print('–í—ã–±—Ä–∞–ª–∏ –ª–∞—Ç—Ç–µ')

        elif query.data == 'm3':

            selected_item["name"] = '–≠—Å–ø—Ä–µ—Å—Å–æ'
            selected_item["price"] = "7000"
            print('–í—ã–±—Ä–∞–ª–∏ —ç—Å–ø—Ä–µ—Å—Å–æ')

        elif query.data == 'm4':

            selected_item["name"] = "–†–∞—Ñ"
            selected_item["price"] = "13000"
            print('–í—ã–±—Ä–∞–ª–∏ —Ä–∞—Ñ')

        elif query.data == 'm5':

            selected_item["name"] = "–ú–æ–∫–∫–∞—á–∏–Ω–æ"
            selected_item["price"] = "12000"
            print('–í—ã–±—Ä–∞–ª–∏ –ª–∞—Ç—Ç–µ')

        elif query.data == 'm6':
            with open('items.json', 'w', encoding='utf-8') as f:
                f.write(json.dumps(self.cart, ensure_ascii=False))
            query.edit_message_text(text="–í—ã —Å–¥–µ–ª–∞–ª–∏ —Å–≤–æ–π –∑–∞–∫–∞–∑\n–ù–∞–∂–º–∏—Ç–µ /order, —á—Ç–æ–±—ã –ø–µ—Ä–µ–π—Ç–∏ –∫ –æ–ø–ª–∞—Ç–µ")
            return

        self.cart.append(selected_item)
        print(self.cart)

    def parse_items(self):
        with open('items.json') as f:
            items = json.load(f)
        shopping_cart = []
        for item in items:
            shopping_cart.append(LabeledPrice(item["name"], item["price"]))
        return shopping_cart

    def menu(self, bot, update):
        with open('menu.json', 'r') as j:
            json_data = json.load(j)
            for d in json_data:
                name = d['name']
                price = d['price'] / 100
                labels = ['–ù–∞–∑–≤–∞–Ω–∏–µ:', '–¶–µ–Ω–∞:']
                data = [name, price]
                table = zip(labels, data)
                list = tabulate(table, tablefmt="simple")
                bot.send_message(chat_id=update.message.chat_id, text=list)

    # –ü–µ—Ä–≤–∞—è —Ñ–æ—Ä–º–∞ —Å–±–µ—Ä–±–∞–Ω–∫
    def precheckout_callback(self, bot, update):
        precheckout_info = update.pre_checkout_query
        bot.answer_pre_checkout_query(pre_checkout_query_id=precheckout_info.id, ok=True)
        return precheckout_info

    # TODO: send ordered items after successful payment
    # –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞ (–ø–æ—Å–ª–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–≥–æ 8-–º–∏ –∑–Ω–∞—á–Ω–æ–≥–æ –ø–∞—Ä–æ–ª—è - –ø—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç –±–∞–Ω–∫–∞)
    def successful_payment_callback(self, bot, update):
        update.message.reply_text("–ë–ª–∞–≥–æ–¥–∞—Ä–∏–º –≤–∞—Å –∑–∞ –æ–ø–ª–∞—Ç—É")
        print(self.precheckout_callback())


# Launch all necessary functions and handlers
def main():
    coffee_bot = CoffeeBot()

    # API –±–æ—Ç–∞
    updater = Updater(token="718571818:AAE3kvTrfr9P7sUMeJAsMmVi7Tv8ghTAwC0")

    # –•—ç–Ω–¥–ª–µ—Ä—ã –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –ø—Ä–∏ –≤–≤–æ–¥–µ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –∫–æ–º–∞–Ω–¥–∞
    dp = updater.dispatcher

    # –°—Ç–∞—Ä—Ç
    dp.add_handler(CommandHandler("start", coffee_bot.start_callback))

    # –ó–∞–∫–∞–∑
    dp.add_handler(CommandHandler("order", coffee_bot.order))

    dp.add_handler(CommandHandler("menu", coffee_bot.menu))

    dp.add_handler(CommandHandler("choose", coffee_bot.choose))

    # –ó–∞–∫–ª—é—á–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    dp.add_handler(PreCheckoutQueryHandler(coffee_bot.precheckout_callback))

    # –ú–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ç–æ—Ä –Ω–∞–∂–∞—Ç–∏–π –∫–Ω–æ–ø–æ–∫ –ø–æ—Å–ª–µ –≤—ã–±–æ—Ä–∞ /select_coffee

    dp.add_handler(CallbackQueryHandler(coffee_bot.select_menu_actions))

    # –£—Å–ø–µ—à–Ω–∞—è –æ–ø–ª–∞—Ç–∞
    dp.add_handler(MessageHandler(Filters.successful_payment, coffee_bot.successful_payment_callback))

    updater.start_polling()


# Launch program
if __name__ == '__main__':
    main()
